{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","count","setCount","showMain","setShowMain","showBreak","setShowBreak","useEffect","my_timer","setTimeout","console","log","clearTimeout","seconds","clearButtonE","className","onClick","Math","floor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0PA+EeA,MAjEf,WACE,MAA0BC,oBAAU,GAApC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAgCF,oBAAS,GAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAAkCJ,oBAAS,GAA3C,mBAAOK,EAAP,KAAkBC,EAAlB,KAEAC,qBAAU,WACR,IAAMC,EAAWC,YAAW,YACX,IAAXR,GACJC,GAAS,SAACD,GAAD,OAAWA,EAAQ,OAC3B,KAEH,OAAO,WACLS,QAAQC,IAAI,WACZC,aAAaJ,OAIjB,IA1BcK,EA0BRC,EACJX,GAAYE,EAAY,KACtB,wBACEU,UAAU,YACVC,QAAS,WACPZ,GAAY,GACZE,GAAa,GACbJ,GAAU,IALd,mBAWJ,OACE,sBAAKa,UAAU,iBAAf,UACE,+BAzCUF,EAyCGZ,GAxCA,IAAbY,EAAuB,GACvBA,EAAU,GAAWA,EAAU,WAExBI,KAAKC,MAAML,EAAU,IAAM,UACdA,EAAU,KAAO,EAAI,GAAMA,EAAU,GAAM,eAqC/D,sBAAKE,UAAU,MAAf,UACGZ,GACC,wBACEY,UAAU,aACVC,QAAS,WACPd,EAAmB,MACnBE,GAAY,GACZE,GAAa,IALjB,qCAYDD,GACC,wBACEU,UAAU,cACVC,QAAS,WACPd,EAAmB,KACnBI,GAAa,GACbF,GAAY,IALhB,iCAWDU,SC7DMK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.2ff9c658.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\nimport \"./App.css\";\n\nconst is_prod = 1;\n\nconst format = (seconds) => {\n  if (seconds === -1) return \"\";\n  if (seconds < 60) return seconds + \" seconds\";\n\n  let mins = Math.floor(seconds / 60) + \" mins \";\n  let remaining_seconds = seconds % 60 === 0 ? \"\" : (seconds % 60) + \" seconds\";\n  return mins + remaining_seconds;\n};\n\nfunction App() {\n  const [count, setCount] = useState(-1);\n  const [showMain, setShowMain] = useState(true);\n  const [showBreak, setShowBreak] = useState(true);\n\n  useEffect(() => {\n    const my_timer = setTimeout(() => {\n      if (count === -1) return;\n      setCount((count) => count - 1);\n    }, 1_000);\n\n    return () => {\n      console.log(\"cleared\");\n      clearTimeout(my_timer);\n    };\n  });\n\n  const clearButtonE =\n    showMain && showBreak ? null : (\n      <button\n        className=\"btn-clear\"\n        onClick={() => {\n          setShowMain(true);\n          setShowBreak(true);\n          setCount(-1);\n        }}\n      >\n        Clear\n      </button>\n    );\n  return (\n    <div className=\"main-container\">\n      <div>{format(count)}</div>\n      <div className=\"row\">\n        {showMain && (\n          <button\n            className=\"main-timer\"\n            onClick={() => {\n              setCount(is_prod ? 25 * 60 : 6); // prod: 25mins; dev: 6secs\n              setShowMain(false);\n              setShowBreak(true);\n            }}\n          >\n            Start Pomodoro: 25 mins\n          </button>\n        )}\n\n        {showBreak && (\n          <button\n            className=\"break-timer\"\n            onClick={() => {\n              setCount(is_prod ? 5 * 60 : 3); // prod: 5mins; dev: 3secs\n              setShowBreak(false);\n              setShowMain(true);\n            }}\n          >\n            Start BREAK: 5 mins\n          </button>\n        )}\n        {clearButtonE}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"./base.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}